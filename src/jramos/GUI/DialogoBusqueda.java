/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DialogoBusqueda.java
 *
 * Created on 18-06-2010, 06:50:55 PM
 */

package jramos.GUI;

import javax.swing.DefaultListModel;
import jramos.ManipuladorListas;
import jramos.tiposDatos.Carrera;
import jramos.tiposDatos.Curso;
import jramos.tiposDatos.Profesor;

/**
 *
 * @author victor
 */
public class DialogoBusqueda extends javax.swing.JDialog {
    DefaultListModel modeloListaObj;
    ManipuladorListas listManager;

    /** Creates new form DialogoBusqueda */
    public DialogoBusqueda(java.awt.Frame parent, boolean modal, ManipuladorListas listManager, Class tipoObjeto) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent);
        this.listManager = listManager;
        this.selectorTipoObj.removeAllItems();
        this.selectorCriterioBusq.removeAllItems();
        this.listObjFound.removeAll();
        this.modeloListaObj = new DefaultListModel();
        this.listObjFound.setModel(this.modeloListaObj);
        this.selectorTipoObj.addItem("Carrera");
        this.selectorTipoObj.addItem("Curso");
        this.selectorTipoObj.addItem("Profesor");
        if (tipoObjeto == Carrera.class)
            this.selectorTipoObj.setSelectedItem("Carrera");
        if (tipoObjeto == Curso.class)
            this.selectorTipoObj.setSelectedItem("Curso");
        if (tipoObjeto == Profesor.class)
            this.selectorTipoObj.setSelectedItem("Profesor");
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectorTipoObj = new javax.swing.JComboBox();
        campoPalabrasBusq = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listObjFound = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        selectorCriterioBusq = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaInfoObj = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        botonCerrar = new javax.swing.JButton();
        botonBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dialogo de busqueda");

        selectorTipoObj.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "tipo de dato a buscar" }));
        selectorTipoObj.setToolTipText("Seleccione que es lo que está buscando");
        selectorTipoObj.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectorTipoObjItemStateChanged(evt);
            }
        });
        selectorTipoObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorTipoObjActionPerformed(evt);
            }
        });

        campoPalabrasBusq.setToolTipText("Escriba aquí las palabras de su busqueda");

        listObjFound.setToolTipText("Listado con los resultados de la busqueda");
        listObjFound.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listObjFoundValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listObjFound);

        jLabel1.setText("Resultados busqueda:");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel2.setText("Seleccione que está buscando");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel3.setText("Seleccione criterio de busqueda");

        selectorCriterioBusq.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "criterio de busqueda" }));
        selectorCriterioBusq.setToolTipText("Seleccione el criterio de busqueda");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel4.setText("Palabras de busqueda");

        areaInfoObj.setColumns(20);
        areaInfoObj.setRows(5);
        areaInfoObj.setToolTipText("Información del objeto encontrado");
        jScrollPane2.setViewportView(areaInfoObj);

        jLabel5.setText("Información del objeto: ");

        botonCerrar.setText("Cerrar");
        botonCerrar.setToolTipText("Cerrar el dialogo de busqueda");
        botonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCerrarActionPerformed(evt);
            }
        });

        botonBuscar.setText("Buscar ya!");
        botonBuscar.setToolTipText("Haga click aquí para comenzar a buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectorCriterioBusq, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectorTipoObj, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addComponent(campoPalabrasBusq)
                            .addComponent(botonBuscar))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botonCerrar)
                        .addGap(176, 176, 176))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(269, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(277, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectorTipoObj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectorCriterioBusq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(4, 4, 4)
                        .addComponent(campoPalabrasBusq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBuscar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCerrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectorTipoObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorTipoObjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectorTipoObjActionPerformed

    private void botonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCerrarActionPerformed
        // cierro el dialogo de busqueda al preisonar el boton "cerrar"
        this.setVisible(false);
    }//GEN-LAST:event_botonCerrarActionPerformed

    private void selectorTipoObjItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectorTipoObjItemStateChanged
        // modifico el otro selector dependiendo del tipo de objeto buscado
        this.selectorCriterioBusq.removeAllItems();
        if (this.selectorTipoObj.getSelectedItem() == null)
            return ;
        if (this.selectorTipoObj.getSelectedItem().equals("Curso"))
        {   this.selectorCriterioBusq.addItem("Nombre curso");
            this.selectorCriterioBusq.addItem("Carrera");
            this.selectorCriterioBusq.addItem("Código de curso");
            this.selectorCriterioBusq.addItem("Sección");
            this.selectorCriterioBusq.addItem("Nombre del profesor asignado");

        }
        if (this.selectorTipoObj.getSelectedItem().equals("Carrera"))
        {   this.selectorCriterioBusq.addItem("Nombre de carrera");
            this.selectorCriterioBusq.addItem("nombre de la Facultad");
            this.selectorCriterioBusq.addItem("Nombre de un curso que posea");

        }
        if (this.selectorTipoObj.getSelectedItem().equals("Profesor"))
        {   this.selectorCriterioBusq.addItem("Nombre del profesor");
            this.selectorCriterioBusq.addItem("Nombre de curso asignado");
            this.selectorCriterioBusq.addItem("Carrera en que hace clases");
        }
        
    }//GEN-LAST:event_selectorTipoObjItemStateChanged

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        // Acción a realizar cuando se presiona el boton "buscar ya!"
        String tipoObj = (String)this.selectorTipoObj.getSelectedItem();
        String criterioBusq = (String)this.selectorCriterioBusq.getSelectedItem();
        String palabraBusq = this.campoPalabrasBusq.getText().trim();
        this.listObjFound.removeAll();
        this.modeloListaObj.removeAllElements();
        if (tipoObj.equals("Carrera"))
        {       if (criterioBusq.equals("Nombre de carrera"))
                {       for (Carrera carrera :this.listManager.getListaCarreras())
                        {       if (carrera.getNombreCarrera().contains(palabraBusq) && (!this.modeloListaObj.contains(carrera)))
                                        this.modeloListaObj.addElement(carrera);
                        }
                }
                if (criterioBusq.equals("nombre de la Facultad"))
                {       for (Carrera carrera :this.listManager.getListaCarreras())
                        {       if (carrera.getFacultad().getNombreFacultad().contains(palabraBusq) && (!this.modeloListaObj.contains(carrera)))
                                        this.modeloListaObj.addElement(carrera);
                        }
                }
                if (criterioBusq.equals("Nombre de un curso que posea"))
                {       for (Curso curso : this.listManager.getListaCursos())
                        {       if ((curso.getNombreCurso().contains(palabraBusq)) && (!this.modeloListaObj.contains(curso.getEnCarrera())))
                                        this.modeloListaObj.addElement(curso.getEnCarrera());
                        }
                }
        }
        if (tipoObj.equals("Curso"))
        {       if (criterioBusq.equals("Nombre curso"))
                {       for (Curso curso: this.listManager.getListaCursos())
                        {       if ((curso.getNombreCurso().contains(palabraBusq)) && (!this.modeloListaObj.contains(curso)))
                                    this.modeloListaObj.addElement(curso);
                        }
                }
                if (criterioBusq.equals("Carrera"))
                {       for (Curso curso: this.listManager.getListaCursos())
                        {       if ((curso.getEnCarreraStr().contains(palabraBusq)) && (!this.modeloListaObj.contains(curso)))
                                    this.modeloListaObj.addElement(curso);
                        }
                }
                if (criterioBusq.equals("Código de curso"))
                {       for (Curso curso: this.listManager.getListaCursos())
                        {       if (((""+curso.getCodigoCurso()).contains(palabraBusq)) && (!this.modeloListaObj.contains(curso)))
                                    this.modeloListaObj.addElement(curso);
                        }
                }
                if (criterioBusq.equals("Sección"))
                {       for (Curso curso: this.listManager.getListaCursos())
                        {       if ((curso.getSeccion().contains(palabraBusq)) && (!this.modeloListaObj.contains(curso)))
                                    this.modeloListaObj.addElement(curso);
                        }
                }
                if (criterioBusq.equals("Nombre del profesor asignado"))
                {       for (Curso curso: this.listManager.getListaCursos())
                        {       if ((curso.getNombreProfesor().contains(palabraBusq)) && (!this.modeloListaObj.contains(curso)))
                                    this.modeloListaObj.addElement(curso);
                        }
                }

        }
        if (tipoObj.equals("Profesor"))
        {       if (criterioBusq.equals("Nombre del profesor"))
                {       for (Profesor profe :this.listManager.getListaProfesores())
                        {       if (profe.getNombreProfesor().contains(palabraBusq) && (!this.modeloListaObj.contains(profe)))
                                        this.modeloListaObj.addElement(profe);
                        }
                }
                if (criterioBusq.equals("Nombre de curso asignado"))
                {       for (Profesor profe :this.listManager.getListaProfesores())
                        {       if (profe.getCursosAsignados().contains(palabraBusq) && (!this.modeloListaObj.contains(profe)))
                                        this.modeloListaObj.addElement(profe);
                        }
                }
                if (criterioBusq.equals("Carrera en que hace clases"))
                {       for (Profesor profe :this.listManager.getListaProfesores())
                        {       for (Curso curso : profe.getCursosAsigArrayList())
                                {       if (curso.getEnCarrera().getNombreCarrera().contains(palabraBusq) && (!this.modeloListaObj.contains(profe)))
                                                this.modeloListaObj.addElement(profe);

                                }
                        }

                }
        }
        this.listObjFound.setModel(this.modeloListaObj);
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void listObjFoundValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listObjFoundValueChanged
        // Acción a realizar cuando se selecciona un elemento de la busqueda
        if (this.listObjFound.getSelectedValue() == null)
            return ;
        Class claseObjeto = this.listObjFound.getSelectedValue().getClass();
        if (claseObjeto == Carrera.class)
        {       Carrera carreraSeleccionada = (Carrera)this.listObjFound.getSelectedValue();
                this.areaInfoObj.setText("Nombre de Carrera: " + carreraSeleccionada.getNombreCarrera()+"\nFacultad de "+carreraSeleccionada.getFacultad()+"\nCantidad de semestres : "+carreraSeleccionada.getListaSemestres().size()+"\nDescripción de la carrera: "+carreraSeleccionada.getDescripcion());
        }

        if (claseObjeto == Curso.class)
        {       Curso cursoSeleccionado = (Curso)this.listObjFound.getSelectedValue();
                this.areaInfoObj.setText("Nombre del curso: " + cursoSeleccionado.getNombreCurso()+"\nCódigo del curso: "+cursoSeleccionado.getCodigoCurso()+"\nSección: "+cursoSeleccionado.getSeccion()+"\nProfesor asignado: "+cursoSeleccionado.getNombreProfesor()+"\nCarrera en que se dicta: "+cursoSeleccionado.getEnCarreraStr()+"\nSemestre en que se dicta: "+cursoSeleccionado.getEnSemestre()+"\nHorario: "+cursoSeleccionado.getHorario()+"\nDescripción del curso: "+cursoSeleccionado.getDescripcion());
        }
        if (claseObjeto == Profesor.class)
        {       Profesor profesorSeleccionado = (Profesor)this.listObjFound.getSelectedValue();
                this.areaInfoObj.setText("Nombre del profesor: "+profesorSeleccionado.getNombreProfesor()+"\nRut del profesor: "+profesorSeleccionado.getRutProfesor()+"\nCursos para impartir: "+profesorSeleccionado.getCodCursosQueImparte()+"\nHoras disponibles: "+profesorSeleccionado.getHorasDisponibles() + "\nCursosAsignados: "+profesorSeleccionado.getCursosAsignados()+"\nHoras asignadas: "+profesorSeleccionado.getHorasAsignadas());
        }
        
    }//GEN-LAST:event_listObjFoundValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaInfoObj;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonCerrar;
    private javax.swing.JTextField campoPalabrasBusq;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listObjFound;
    private javax.swing.JComboBox selectorCriterioBusq;
    private javax.swing.JComboBox selectorTipoObj;
    // End of variables declaration//GEN-END:variables

}
