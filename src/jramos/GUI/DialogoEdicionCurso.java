/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DialogoEdicionCurso.java
 *
 * Created on 09-06-2010, 12:25:43 AM
 */

package jramos.GUI;

import java.util.ArrayList;
import jramos.ManipuladorListas;
import jramos.excepciones.HoraNoDisponibleException;
import jramos.tiposDatos.Carrera;
import jramos.tiposDatos.Curso;
import jramos.tiposDatos.Hora;
import jramos.tiposDatos.Profesor;
import jramos.tiposDatos.Semestre;

/**
 *
 * @author victor
 */
public class DialogoEdicionCurso extends javax.swing.JDialog {
    private java.awt.Frame ventanaPadre;
    private Curso cursoAEditar;
    private ManipuladorListas listManager;
    private ArrayList<Hora> horasElegidas;
    /** Creates new form DialogoEdicionCurso */
    public DialogoEdicionCurso(java.awt.Frame ventanaPadre, boolean modal, ManipuladorListas listManager, Curso cursoAEditar) {
        super(ventanaPadre, modal);
        initComponents();
        this.setLocationRelativeTo(ventanaPadre);
        this.ventanaPadre = ventanaPadre;
        this.cursoAEditar = cursoAEditar;
        this.listManager = listManager;
        this.setTitle(this.getTitle()+ cursoAEditar.getNombreCurso());
        this.campoNombreCurso.setText(cursoAEditar.getNombreCurso());
        this.campoCodigoCurso.setText((new Integer(cursoAEditar.getCodigoCurso())).toString());
        this.campoSeccionCurso.setText(cursoAEditar.getSeccion());
        this.cuadroDescripCurso.setText(cursoAEditar.getDescripcion());
        this.horasElegidas = cursoAEditar.getHorasAsigArrayList();
        
        this.selectorListaCarreras.removeAllItems();
        //Muestro las carreras en el selector de lista de carreras del dialogo
        for (Carrera carrera : listManager.getListaCarreras())
        {       this.selectorListaCarreras.addItem(carrera);
        }
        //Selecciono por default la carrera en que ya se encuentra el curso.
        this.selectorListaCarreras.setSelectedItem(cursoAEditar.getEnCarrera());

        this.selectorListaSemestres.removeAllItems();
        //Muestro los semestre en el selector de listas de semestres del dialogo
        ArrayList<Semestre> listaSemestresAMostrar = cursoAEditar.getEnCarrera().getListaSemestres();
        for (Semestre semestre : listaSemestresAMostrar)
        {       this.selectorListaSemestres.addItem(semestre);
        }
        //Selecciono por default el semestre en que ya se encuentra el curso.
        this.selectorListaSemestres.setSelectedItem(cursoAEditar.getEnSemestre());

        this.selectorListaProfesores.removeAllItems();
        //Muestro los profesores que pueden dictar tal curso
        for (Profesor profesor : this.listManager.getListaProfesores())
        {       if (profesor.getCodCursosQueImparteArrayList().contains(new Integer(cursoAEditar.getCodigoCurso())))
                        this.selectorListaProfesores.addItem(profesor);
        }
        this.selectorListaProfesores.addItem(null); //Le agrego un elemento vacio.
        //Seteo el profesor que ya tiene asignado el curso en el selector de profesor, si no tiene asignado seteo null
        this.selectorListaProfesores.setSelectedItem(cursoAEditar.getProfeAsig());
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel15 = new javax.swing.JLabel();
        campoNombreCurso = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        campoCodigoCurso = new javax.swing.JTextField();
        campoSeccionCurso = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        selectorListaCarreras = new javax.swing.JComboBox();
        selectorListaSemestres = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        botonAplicarCambiosCurso = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        selectorListaProfesores = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        botonElegirHoras = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cuadroDescripCurso = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dialogo de edición de un curso - ");

        jLabel15.setText("Nombre del curso:");

        campoNombreCurso.setEditable(false);

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel21.setText("Editar la información de un curso:");

        jLabel16.setText("Código del curso:");

        campoCodigoCurso.setEditable(false);

        campoSeccionCurso.setEditable(false);

        jLabel18.setText("Sección:");

        jLabel19.setText("Carrera en que se dicta:");

        selectorListaCarreras.setEnabled(false);
        selectorListaCarreras.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectorListaCarrerasItemStateChanged(evt);
            }
        });

        selectorListaSemestres.setEnabled(false);

        jLabel1.setText("¿En qué semestre? ");

        botonAplicarCambiosCurso.setText("Aplicar cambios");
        botonAplicarCambiosCurso.setToolTipText("Haga click aquí para aplicar los cambios al curso");
        botonAplicarCambiosCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAplicarCambiosCursoActionPerformed(evt);
            }
        });

        jLabel2.setText("Profesor asignado");

        selectorListaProfesores.setToolTipText("Seleccione aquí el profesor asignado al curso");
        selectorListaProfesores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorListaProfesoresActionPerformed(evt);
            }
        });

        jLabel3.setText("Horas asignadas");

        botonElegirHoras.setText("Elegir horas...");
        botonElegirHoras.setToolTipText("Haga click aquí para seleccionar la asignación horaria del curso");
        botonElegirHoras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElegirHorasActionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");
        botonCancelar.setToolTipText("Haga click aquí para descartar los cambios y cerrar este dialogo");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        cuadroDescripCurso.setColumns(20);
        cuadroDescripCurso.setRows(3);
        cuadroDescripCurso.setToolTipText("Escriba aquí una descripción del curso");
        jScrollPane1.setViewportView(cuadroDescripCurso);

        jLabel4.setText("Descripción del curso:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(selectorListaSemestres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(selectorListaCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(campoCodigoCurso)
                                .addComponent(campoSeccionCurso, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                .addComponent(selectorListaProfesores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(botonElegirHoras)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(botonAplicarCambiosCurso)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(botonCancelar))
                                .addComponent(campoNombreCurso))))
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(campoNombreCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(campoCodigoCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(campoSeccionCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectorListaCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(selectorListaSemestres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectorListaProfesores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(botonElegirHoras))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonCancelar)
                            .addComponent(botonAplicarCambiosCurso)))
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectorListaCarrerasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectorListaCarrerasItemStateChanged
        // Cuando se selecciona una carrera:
        // En el selectorListaSemestres se deben mostrar solo los semestres de esa carrera
        this.selectorListaSemestres.removeAllItems();
        ArrayList<Semestre> listaSemestresAMostrar = this.cursoAEditar.getEnCarrera().getListaSemestres();
        if (this.selectorListaCarreras.getSelectedItem() == null)
            return ;
        for (Semestre semestre : listaSemestresAMostrar) {
            this.selectorListaSemestres.addItem(semestre);
        }
}//GEN-LAST:event_selectorListaCarrerasItemStateChanged

    public void aplicarCambiosEdicion(boolean comprobarHorarioSemestreAnterior, boolean comprobarHorarioSemestreSiguiente)
    {   //edito el curso.
        try {
            Profesor profesorAsignarle = (Profesor)this.selectorListaProfesores.getSelectedItem();
            this.listManager.editaCurso(this.cursoAEditar, profesorAsignarle, this.horasElegidas, this.cuadroDescripCurso.getText(), comprobarHorarioSemestreAnterior, comprobarHorarioSemestreSiguiente);
        }
        catch (HoraNoDisponibleException HNDE)
        {       if (HNDE.getCodigoError() == HoraNoDisponibleException.TOPE_NIVEL)
                {       DialogoError dialogoError = new DialogoError(ventanaPadre, rootPaneCheckingEnabled, HNDE.getMessage(), "Elija otras horas");
                        dialogoError.setVisible(true);
                        dialogoError = null;
                        return;
                }
                if (HNDE.getCodigoError() == HoraNoDisponibleException.TOPE_HORAS_DISP_PROFE)
                {       DialogoError dialogoError = new DialogoError(ventanaPadre, rootPaneCheckingEnabled, HNDE.getMessage(), "Elija otras horas");
                        dialogoError.setVisible(true);
                        dialogoError = null;
                        return;
                }
                if (HNDE.getCodigoError() == HoraNoDisponibleException.TOPE_HORAS_OCUP_PROFE)
                {       DialogoError dialogoError = new DialogoError(ventanaPadre, rootPaneCheckingEnabled, HNDE.getMessage(), "Elija otras horas");
                        dialogoError.setVisible(true);
                        dialogoError = null;
                        return;
                }
                if (HNDE.getCodigoError() == HoraNoDisponibleException.TOPE_NIVEL_ANT)
                {       DialogoConfirmacion dialogoAviso = new DialogoConfirmacion((java.awt.Window)this, rootPaneCheckingEnabled, DialogoConfirmacion.CONFIRMA_AGREGAR_TOPE_NIVEL_ANT, HNDE, !comprobarHorarioSemestreSiguiente);
                        dialogoAviso.setVisible(true);
                        dialogoAviso = null;
                        return ;
                }
                if (HNDE.getCodigoError() == HoraNoDisponibleException.TOPE_NIVEL_SIG)
                {       DialogoConfirmacion dialogoAviso = new DialogoConfirmacion((java.awt.Window)this, rootPaneCheckingEnabled, DialogoConfirmacion.CONFIRMA_AGREGAR_TOPE_NIVEL_SIG, HNDE, !comprobarHorarioSemestreAnterior);
                        dialogoAviso.setVisible(true);
                        dialogoAviso = null;
                        return ;
                }

        }
        
        this.setVisible(false);

        //ACTUALIZO GUI DE VENTANA PRINCIPAL
        ((VentanaPrincipal)this.ventanaPadre).actualizaJListListaCursos();
        ((VentanaPrincipal)this.ventanaPadre).actualizaJListListaProfes();

        /*Borrar desde aqui
        this.listModelCursos = new DefaultListModel();
        for (Curso curso : this.listManager.getListaCursos()) {
            this.listModelCursos.addElement(curso);
        }
        this.visualizadorListaCursos.setModel(this.listModelCursos);
        this.visualizadorListaCursosValueChanged(null);
        this.cuadroInformacionCurso.setText("Se ha agregado correctamente el curso: "  + this.campoNombreCursoNuevo.getText());
        */
        //BORRAR HASTA AQUI!

    }

    private void botonAplicarCambiosCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAplicarCambiosCursoActionPerformed
        // Acción a realizar cuando se presiona el boton "agregar curso"
        this.aplicarCambiosEdicion(true, true);
    }//GEN-LAST:event_botonAplicarCambiosCursoActionPerformed

    void asignarHorasElegidas(ArrayList <Hora> horasElegidas)
    {
            this.horasElegidas = horasElegidas;
    }
    private void selectorListaProfesoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorListaProfesoresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectorListaProfesoresActionPerformed

    private void botonElegirHorasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElegirHorasActionPerformed
        // Acción a realizar cuando se presiona el boton "elegir horas"
        //Debo mostrar un cuadro con las horas disponibles del profesor que se pueden asignar a ese curso.
        Profesor profesorSeleccionado;
        profesorSeleccionado = (Profesor)this.selectorListaProfesores.getSelectedItem();
        if (profesorSeleccionado != null)
        {   VisualizadorHorarioObjeto dialogoElegirHorasDisp = new VisualizadorHorarioObjeto(this, rootPaneCheckingEnabled, cursoAEditar, VisualizadorHorarioObjeto.EDICION, (Profesor)this.selectorListaProfesores.getSelectedItem());
            dialogoElegirHorasDisp.setVisible(true);
            dialogoElegirHorasDisp = null;
            return ;
        }
        else
        {       //abro nueva ventana de error.
                DialogoError dialogoError = new DialogoError(this.ventanaPadre, rootPaneCheckingEnabled, "no hay profesor para asignar horas", "Seleccione un profesor desde la lista de profesores");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonElegirHorasActionPerformed

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        // Acción a realizar cuando se presiona el boton "cancelar": solo cierro la ventana
        this.setVisible(false);
    }//GEN-LAST:event_botonCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAplicarCambiosCurso;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonElegirHoras;
    private javax.swing.JTextField campoCodigoCurso;
    private javax.swing.JTextField campoNombreCurso;
    private javax.swing.JTextField campoSeccionCurso;
    private javax.swing.JTextArea cuadroDescripCurso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox selectorListaCarreras;
    private javax.swing.JComboBox selectorListaProfesores;
    private javax.swing.JComboBox selectorListaSemestres;
    // End of variables declaration//GEN-END:variables

}
