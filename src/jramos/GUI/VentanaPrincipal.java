/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VentanaPrincipal.java
 *
 * Created on 27-05-2010, 07:57:59 PM
 */

package jramos.GUI;

import jramos.excepciones.HourOutOfRangeException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import jramos.ManipuladorListas;
import jramos.tiposDatos.*;
import jramos.capaIO.CapaIOCursos;
import jramos.capaIO.CapaIOProfes;
import jramos.excepciones.StringVacioException;
import jramos.excepciones.nombreRepetidoException;

/**
 *
 * @author victor
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    public static final String MANUAL_PDF = "Manual_Usuario.pdf";
    private ManipuladorListas listManager;
    private CapaIOCursos gestorIOCursos;
    private CapaIOProfes gestorIOProfes;
    private DefaultListModel listModelFacultades;
    private DefaultListModel listModelCarreras;
    private DefaultListModel listModelProfesores;
    private DefaultListModel listModelCursos;
    public static int NUEVA = 1;
    public static int EDITA = 2;

    /** Creates new form VentanaPrincipal */
    public VentanaPrincipal(ManipuladorListas listManager, CapaIOCursos gestorIOCursos, CapaIOProfes gestorIOProfes) {
        initComponents();
        this.setLocationRelativeTo(null);
        int i, tamLista;
        this.listManager = listManager;
        this.visualizadorListaFacultades.removeAll();
        this.visualizadorListaProfes.removeAll();
        this.visualizadorListaCarreras.removeAll();
        this.visualizadorListaCursos.removeAll();
        this.gestorIOCursos = gestorIOCursos;
        this.gestorIOProfes = gestorIOProfes;
        this.listModelFacultades = new DefaultListModel();
        this.listModelCarreras = new DefaultListModel();
        this.listModelProfesores = new DefaultListModel();
        this.listModelCursos = new DefaultListModel();

        this.selectorListaSemestres.removeAllItems();
        this.selectorListaCarreras.removeAllItems();
        this.selectorLetraSeccion.removeAllItems();
        this.selectorNumeroSeccion.removeAllItems();
        
        //Muestro las carreras en el selector de lista de carreras de la pestaña "curso"
        ArrayList<Carrera> listaCarreras = listManager.getListaCarreras();
        int cantidadCarreras = listaCarreras.size();
        for (i = 0; i < cantidadCarreras; i++)
        {       this.selectorListaCarreras.addItem(listaCarreras.get(i));
        }
        //listo las letras y numeros de seccion en los selectores de la pestaña "curso" de la GUI
        char c;
        //Usando la tabla ASCII listo los numeros de 1 a 9 como string
        for(c = 49; c<58; c++)
        {       this.selectorNumeroSeccion.addItem((new Character(c)).toString());
        }
        //Usando la tabla ASCII listo las letras de A a la Z como string
        for (c = 65; c <91; c++)
        {       this.selectorLetraSeccion.addItem((new Character(c)).toString());
        }
        /*
        //Muestro los semestres en el selector de semestres de la pestaña "curso"
        ArrayList<Semestre> listaSemestres = listManager.getListaSemestres();
        int cantidadSemestres = listaSemestres.size();
        for (i = 0; i < cantidadSemestres; i++)
        {       if(listaSemestres.get(i).getCodigoEnCarrera() == ((Carrera)this.selectorListaCarreras.getSelectedItem()).getCodigoCarrera())
                {       this.selectorListaSemestres.addItem(listaSemestres.get(i));
                }
        }
        */
        //Muestra el listado de facultades en un jList.
        tamLista = this.listManager.getListaFacultades().size();
        for (i = 0; i < tamLista; i++)
        {   this.listModelFacultades.addElement(this.listManager.getListaFacultades().get(i));
        }
        //Muestra el listado de profesores en un jList
        tamLista = this.listManager.getListaProfesores().size();
        for (i = 0; i < tamLista; i++)
        {   this.listModelProfesores.addElement(this.listManager.getListaProfesores().get(i));
        }
        //Muestra el listado de cursos en un jList
        tamLista = this.listManager.getListaCursos().size();
        for (i = 0; i < tamLista; i++)
        {   this.listModelCursos.addElement(this.listManager.getListaCursos().get(i));
        }

        this.visualizadorListaProfes.setModel(this.listModelProfesores);
        this.visualizadorListaFacultades.setModel(this.listModelFacultades);
        this.visualizadorListaCarreras.setModel(this.listModelCarreras);
        this.visualizadorListaCursos.setModel(listModelCursos);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelVisualizadorGeneral = new javax.swing.JTabbedPane();
        PanelVisualizadorCarreras = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        visualizadorListaFacultades = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        visualizadorListaCarreras = new javax.swing.JList();
        botonNuevaCarrera = new javax.swing.JButton();
        botonNuevaFacultad = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        labelCarreraSeleccionada = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        cuadroInfornacionFacultad = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        cuadroInformacionCarrera = new javax.swing.JTextArea();
        botonVerMalla = new javax.swing.JButton();
        botonEditarFacultad = new javax.swing.JButton();
        botonEliminarFacultad = new javax.swing.JButton();
        botonEditarCarrera = new javax.swing.JButton();
        botonEliminarCarrera = new javax.swing.JButton();
        botonBuscarCarrera = new javax.swing.JButton();
        PanelVisualizadorProfesores = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        visualizadorListaProfes = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        cuadroInformacionProfes = new javax.swing.JTextArea();
        botonAgregarProfesor = new javax.swing.JButton();
        campoNombreProfesorNuevo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        campoRutProfesor = new javax.swing.JTextField();
        campoRamosQueDicta = new javax.swing.JTextField();
        campoHorasDisponibles = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        botonEditarProfesor = new javax.swing.JButton();
        botonEliminarProfesor = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        botonVerHorarioProfesor = new javax.swing.JButton();
        botonBuscarProfesor = new javax.swing.JButton();
        panelVisualizadorCursos = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        visualizadorListaCursos = new javax.swing.JList();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        cuadroInformacionCurso = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        campoNombreCursoNuevo = new javax.swing.JTextField();
        campoCodigoCursoNuevo = new javax.swing.JTextField();
        selectorListaCarreras = new javax.swing.JComboBox();
        botonAgregarCurso = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        botonEditarCurso = new javax.swing.JButton();
        botonEliminarCurso = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        botonVerHorarioCurso = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        selectorListaSemestres = new javax.swing.JComboBox();
        selectorLetraSeccion = new javax.swing.JComboBox();
        selectorNumeroSeccion = new javax.swing.JComboBox();
        botonBuscarCurso = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        cuadroDescripCurso = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuSalir = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuVerManual = new javax.swing.JMenuItem();
        menuAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JRamos- Planificación horaria");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("JRamos - Planificación horaria"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        PanelVisualizadorGeneral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PanelVisualizadorGeneralMouseClicked(evt);
            }
        });
        PanelVisualizadorGeneral.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                PanelVisualizadorGeneralStateChanged(evt);
            }
        });

        jLabel3.setText("Facultad de: ");

        jLabel4.setText("Carrera: ");

        visualizadorListaFacultades.setToolTipText("Lista de facultades, seleccione una facultad para ver sus detalles y carreras");
        visualizadorListaFacultades.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                visualizadorListaFacultadesValueChanged(evt);
            }
        });
        visualizadorListaFacultades.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                visualizadorListaFacultadesComponentHidden(evt);
            }
        });
        jScrollPane3.setViewportView(visualizadorListaFacultades);

        visualizadorListaCarreras.setToolTipText("Lista de carreras, seleccione una carrera para ver sus detalles");
        visualizadorListaCarreras.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                visualizadorListaCarrerasValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(visualizadorListaCarreras);

        botonNuevaCarrera.setFont(new java.awt.Font("Dialog", 1, 10));
        botonNuevaCarrera.setText("Nueva carrera...");
        botonNuevaCarrera.setToolTipText("Haga click aquí para agregar una carrera al registro");
        botonNuevaCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevaCarreraActionPerformed(evt);
            }
        });

        botonNuevaFacultad.setFont(new java.awt.Font("Dialog", 1, 10));
        botonNuevaFacultad.setText("Nueva facultad...");
        botonNuevaFacultad.setToolTipText("Haga click aquí para agregar una facultad al registro");
        botonNuevaFacultad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevaFacultadActionPerformed(evt);
            }
        });

        jLabel22.setText("Malla de carrera: ");

        labelCarreraSeleccionada.setText("Seleccione una facultad y luego una carrera...");

        cuadroInfornacionFacultad.setColumns(20);
        cuadroInfornacionFacultad.setRows(5);
        cuadroInfornacionFacultad.setText("Seleccione una facultad del listado del costado para ver su información");
        cuadroInfornacionFacultad.setToolTipText("Información de la facultad seleccionada");
        jScrollPane5.setViewportView(cuadroInfornacionFacultad);

        cuadroInformacionCarrera.setColumns(20);
        cuadroInformacionCarrera.setRows(5);
        cuadroInformacionCarrera.setText("Seleccione una carrera del listado del costado para ver su información");
        cuadroInformacionCarrera.setToolTipText("Información de la carrera seleccionada");
        jScrollPane8.setViewportView(cuadroInformacionCarrera);

        botonVerMalla.setFont(new java.awt.Font("Dialog", 1, 14));
        botonVerMalla.setText("Ver Malla");
        botonVerMalla.setToolTipText("Haga click aquí para ver la malla de la carrera seleccionada");
        botonVerMalla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerMallaActionPerformed(evt);
            }
        });

        botonEditarFacultad.setText("Editar facultad");
        botonEditarFacultad.setToolTipText("Haga click aquí para editar la facultad seleccionada");
        botonEditarFacultad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarFacultadActionPerformed(evt);
            }
        });

        botonEliminarFacultad.setText("Eliminar facultad");
        botonEliminarFacultad.setToolTipText("Haga click aquí para eliminar la facultad seleccionada");
        botonEliminarFacultad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarFacultadActionPerformed(evt);
            }
        });

        botonEditarCarrera.setText("Editar carrera");
        botonEditarCarrera.setToolTipText("Haga click aquí para editar la carrera seleccionada");
        botonEditarCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarCarreraActionPerformed(evt);
            }
        });

        botonEliminarCarrera.setText("Eliminar carrera");
        botonEliminarCarrera.setToolTipText("Haga click aquí para eliminar la carrera seleccionada");
        botonEliminarCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarCarreraActionPerformed(evt);
            }
        });

        botonBuscarCarrera.setText("Buscar carrera");
        botonBuscarCarrera.setToolTipText("Haga click aquí para buscar una carrera");
        botonBuscarCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarCarreraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelVisualizadorCarrerasLayout = new javax.swing.GroupLayout(PanelVisualizadorCarreras);
        PanelVisualizadorCarreras.setLayout(PanelVisualizadorCarrerasLayout);
        PanelVisualizadorCarrerasLayout.setHorizontalGroup(
            PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelVisualizadorCarrerasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonNuevaFacultad)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonNuevaCarrera)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(botonBuscarCarrera)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelVisualizadorCarrerasLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(botonEditarFacultad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addComponent(botonEliminarFacultad)
                        .addGap(126, 126, 126))
                    .addGroup(PanelVisualizadorCarrerasLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelVisualizadorCarrerasLayout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(botonVerMalla, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelCarreraSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane8))
                        .addContainerGap(15, Short.MAX_VALUE))
                    .addGroup(PanelVisualizadorCarrerasLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(botonEditarCarrera)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                        .addComponent(botonEliminarCarrera)
                        .addGap(123, 123, 123))))
        );
        PanelVisualizadorCarrerasLayout.setVerticalGroup(
            PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelVisualizadorCarrerasLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelVisualizadorCarrerasLayout.createSequentialGroup()
                        .addComponent(botonNuevaFacultad, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelVisualizadorCarrerasLayout.createSequentialGroup()
                        .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonEditarFacultad)
                            .addComponent(botonEliminarFacultad))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelVisualizadorCarrerasLayout.createSequentialGroup()
                        .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCarreraSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonVerMalla, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelVisualizadorCarrerasLayout.createSequentialGroup()
                        .addComponent(botonNuevaCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelVisualizadorCarrerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonEditarCarrera)
                        .addComponent(botonEliminarCarrera))
                    .addComponent(botonBuscarCarrera))
                .addContainerGap())
        );

        PanelVisualizadorGeneral.addTab("Carreras", PanelVisualizadorCarreras);

        PanelVisualizadorProfesores.setPreferredSize(new java.awt.Dimension(762, 400));

        visualizadorListaProfes.setToolTipText("Lista de profesores, seleccione un profesor para ver sus detalles");
        visualizadorListaProfes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                visualizadorListaProfesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(visualizadorListaProfes);

        cuadroInformacionProfes.setColumns(20);
        cuadroInformacionProfes.setRows(5);
        cuadroInformacionProfes.setText("Seleccione un profesor del listado del costado para ver su información");
        cuadroInformacionProfes.setToolTipText("Información del profesor seleccionado");
        jScrollPane2.setViewportView(cuadroInformacionProfes);

        botonAgregarProfesor.setText("Agregar profesor");
        botonAgregarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarProfesorActionPerformed(evt);
            }
        });

        campoNombreProfesorNuevo.setToolTipText("Escriba aquí el nombre del profesor que desea agregar");

        jLabel5.setText("Nombre Profesor:");

        jLabel6.setText("RUT:");

        jLabel7.setText("Ramos que puede dictar:");

        jLabel8.setText("Horas disponibles:");

        campoRutProfesor.setToolTipText("Escriba aquí el rut del profesor que desea agregar, sin dígito verificador");

        campoHorasDisponibles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoHorasDisponiblesActionPerformed(evt);
            }
        });

        jLabel9.setText("ej: Alberto Ceballos");

        jLabel10.setText("ej: 1234567");

        jLabel11.setText("ej: codRamo1 codRamo2");

        jLabel12.setText("ej: L4 L5 W3 W4 V1 V2");

        jLabel20.setText("Listado de profesores");

        botonEditarProfesor.setText("Editar profesor");
        botonEditarProfesor.setToolTipText("");
        botonEditarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarProfesorActionPerformed(evt);
            }
        });

        botonEliminarProfesor.setText("Eliminar profesor");
        botonEliminarProfesor.setToolTipText("Haga click aquí para eliminar el profesor seleccionado");
        botonEliminarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarProfesorActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel14.setText("Agregar un nuevo profesor al registro: ");

        botonVerHorarioProfesor.setText("Ver su horario");
        botonVerHorarioProfesor.setToolTipText("Haga click aquí para ver el horario del profesor seleccionado");
        botonVerHorarioProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerHorarioProfesorActionPerformed(evt);
            }
        });

        botonBuscarProfesor.setText("Buscar profesor");
        botonBuscarProfesor.setToolTipText("Haga click aquí para buscar un profesor");
        botonBuscarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarProfesorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelVisualizadorProfesoresLayout = new javax.swing.GroupLayout(PanelVisualizadorProfesores);
        PanelVisualizadorProfesores.setLayout(PanelVisualizadorProfesoresLayout);
        PanelVisualizadorProfesoresLayout.setHorizontalGroup(
            PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelVisualizadorProfesoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(botonBuscarProfesor)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelVisualizadorProfesoresLayout.createSequentialGroup()
                        .addComponent(botonVerHorarioProfesor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonEditarProfesor)
                        .addGap(44, 44, 44)
                        .addComponent(botonEliminarProfesor)
                        .addGap(88, 88, 88))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelVisualizadorProfesoresLayout.createSequentialGroup()
                        .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelVisualizadorProfesoresLayout.createSequentialGroup()
                                .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoRutProfesor, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                    .addComponent(campoNombreProfesorNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                    .addComponent(campoRamosQueDicta, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                    .addComponent(campoHorasDisponibles, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)))
                            .addComponent(botonAgregarProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(29, 29, 29))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        PanelVisualizadorProfesoresLayout.setVerticalGroup(
            PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelVisualizadorProfesoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(botonEditarProfesor)
                    .addComponent(botonVerHorarioProfesor)
                    .addComponent(botonEliminarProfesor))
                .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelVisualizadorProfesoresLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBuscarProfesor)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(PanelVisualizadorProfesoresLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addGap(9, 9, 9)
                        .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel5)
                            .addComponent(campoNombreProfesorNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel6)
                            .addComponent(campoRutProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel7)
                            .addComponent(campoRamosQueDicta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelVisualizadorProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(campoHorasDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(botonAgregarProfesor)
                        .addGap(23, 23, 23))))
        );

        PanelVisualizadorGeneral.addTab("Profesores", PanelVisualizadorProfesores);

        panelVisualizadorCursos.setMinimumSize(new java.awt.Dimension(750, 500));
        panelVisualizadorCursos.setPreferredSize(new java.awt.Dimension(780, 456));
        panelVisualizadorCursos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                panelVisualizadorCursosFocusGained(evt);
            }
        });

        visualizadorListaCursos.setToolTipText("Lista de cursos, seleccione un curso para ver sus detalles");
        visualizadorListaCursos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                visualizadorListaCursosValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(visualizadorListaCursos);

        jLabel13.setText("Listado de cursos");

        cuadroInformacionCurso.setColumns(20);
        cuadroInformacionCurso.setRows(5);
        cuadroInformacionCurso.setText("Seleccione un curso del listado del costado para ver su información");
        cuadroInformacionCurso.setToolTipText("Información del curso seleccionado");
        jScrollPane7.setViewportView(cuadroInformacionCurso);

        jLabel15.setText("Nombre del curso:");

        jLabel16.setText("Código del curso:");

        jLabel18.setText("Sección:");

        jLabel19.setText("Carrera en que se dicta:");

        campoNombreCursoNuevo.setToolTipText("Escriba aquí el nombre del curso que desea agregar");

        campoCodigoCursoNuevo.setToolTipText("Escriba aquí el código del curso que desea agregar");

        selectorListaCarreras.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectorListaCarreras.setToolTipText("Elija aquí la carrera donde será dictado el curso");
        selectorListaCarreras.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectorListaCarrerasItemStateChanged(evt);
            }
        });

        botonAgregarCurso.setText("Agregar Curso");
        botonAgregarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarCursoActionPerformed(evt);
            }
        });

        botonEditarCurso.setText("Editar curso");
        botonEditarCurso.setToolTipText("Haga click aquí para editar el curso seleccionado, asignarle un profesor y/o asignarle horario");
        botonEditarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarCursoActionPerformed(evt);
            }
        });

        botonEliminarCurso.setText("Eliminar curso");
        botonEliminarCurso.setToolTipText("Haga click aquí para eliminar el curso seleccionado");
        botonEliminarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarCursoActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel21.setText("Agregar un nuevo curso al registro:");

        botonVerHorarioCurso.setText("Ver su horario");
        botonVerHorarioCurso.setToolTipText("Haga click aquí para ver el horario del curso seleccionado");
        botonVerHorarioCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerHorarioCursoActionPerformed(evt);
            }
        });

        jLabel1.setText("¿En que semestre? ");

        selectorListaSemestres.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectorListaSemestres.setToolTipText("Elija aquí en que semestre o nivel de la carrera es dictado el curso");

        selectorLetraSeccion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "B", "C", "D" }));

        selectorNumeroSeccion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6" }));

        botonBuscarCurso.setText("Buscar curso");
        botonBuscarCurso.setToolTipText("Haga click aquí para buscar un curso");
        botonBuscarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarCursoActionPerformed(evt);
            }
        });

        cuadroDescripCurso.setColumns(20);
        cuadroDescripCurso.setRows(2);
        cuadroDescripCurso.setToolTipText("Escriba aquí una descripción del curso (opcional)");
        jScrollPane9.setViewportView(cuadroDescripCurso);

        jLabel2.setText("Descripción del curso:");

        javax.swing.GroupLayout panelVisualizadorCursosLayout = new javax.swing.GroupLayout(panelVisualizadorCursos);
        panelVisualizadorCursos.setLayout(panelVisualizadorCursosLayout);
        panelVisualizadorCursosLayout.setHorizontalGroup(
            panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                        .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonBuscarCurso))
                        .addGap(12, 12, 12)
                        .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                                    .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                                            .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel15)
                                                .addComponent(jLabel16)
                                                .addComponent(jLabel19)
                                                .addComponent(jLabel1)
                                                .addComponent(jLabel18)
                                                .addComponent(jLabel2))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(selectorListaSemestres, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(selectorListaCarreras, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(campoNombreCursoNuevo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(campoCodigoCursoNuevo, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelVisualizadorCursosLayout.createSequentialGroup()
                                                        .addComponent(selectorLetraSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(selectorNumeroSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addComponent(botonAgregarCurso, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(132, 132, 132))
                                .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap()))))
                    .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonVerHorarioCurso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonEditarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(botonEliminarCurso)
                        .addGap(166, 166, 166))))
        );
        panelVisualizadorCursosLayout.setVerticalGroup(
            panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(botonVerHorarioCurso)
                    .addComponent(botonEditarCurso)
                    .addComponent(botonEliminarCurso))
                .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(campoNombreCursoNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(campoCodigoCursoNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectorLetraSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)
                            .addComponent(selectorNumeroSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectorListaCarreras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(selectorListaSemestres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelVisualizadorCursosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVisualizadorCursosLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonAgregarCurso)
                                .addGap(15, 15, 15))
                            .addComponent(jLabel2)))
                    .addGroup(panelVisualizadorCursosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBuscarCurso)))
                .addContainerGap())
        );

        PanelVisualizadorGeneral.addTab("Cursos", panelVisualizadorCursos);

        barraMenu.setMinimumSize(new java.awt.Dimension(760, 4));

        menuArchivo.setText("Archivo");

        menuSalir.setText("Salir");
        menuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuSalir);

        barraMenu.add(menuArchivo);

        menuAyuda.setText("Ayuda");

        menuVerManual.setText("Ver Manual de usuario");
        menuVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVerManualActionPerformed(evt);
            }
        });
        menuAyuda.add(menuVerManual);

        menuAcercaDe.setText("Acerca de...");
        menuAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAcercaDeActionPerformed(evt);
            }
        });
        menuAyuda.add(menuAcercaDe);

        barraMenu.add(menuAyuda);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelVisualizadorGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelVisualizadorGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonAgregarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarProfesorActionPerformed
        // Acción a realizar cuando se presiona el boton "agregar profesor"
        int i, tamLista;
        //Intento agregar un profesor nuevo.
        try
        {       this.listManager.agregaProfesor(this.campoNombreProfesorNuevo.getText(), this.campoRutProfesor.getText(), this.campoRamosQueDicta.getText(), this.campoHorasDisponibles.getText());
        }
        catch (nombreRepetidoException nombreRepetido)
        {       //abro nuevo dialogo de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "El nombre del profesor ya existe.", "vuelva a escribir otro nombre para el profesor");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
        catch (StringVacioException nombreVacio)
        {       //abro nuevo dialogo de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No hay un nombre de profesor escrito", "Debe escribir un nombre de profesor");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
        catch (NumberFormatException NFE)
        {       if (NFE.getMessage().equals("rut"))
                {       //Abro nuevo dialogo de error.
                        DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "El rut introducido no es válido", "vuelva a escribir el rut del profesor");
                        dialogoError.setVisible(true);
                        dialogoError = null;
                        return ;
                }
                if (NFE.getMessage().equals("codCurso"))
                {       DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "Los codigos de curso introducidos no son válidos", "vuelva a escribir los cursos disponibles del profesor");
                        dialogoError.setVisible(true);
                        dialogoError = null;
                        return ;
                }
        }
        catch (HourOutOfRangeException HOORE)
        {       //Abro dialogo de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "Las horas introducidas no son válidas.", "Revise las horas escritas y vuelva a escribirlas");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }

        this.listModelProfesores = new DefaultListModel();
        tamLista = this.listManager.getListaProfesores().size();
        for (i = 0; i < tamLista; i++)
        {   this.listModelProfesores.addElement(this.listManager.getListaProfesores().get(i));
        }
        this.visualizadorListaProfes.setModel(this.listModelProfesores);
        this.visualizadorListaProfesValueChanged(null);

    }//GEN-LAST:event_botonAgregarProfesorActionPerformed

    private void campoHorasDisponiblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoHorasDisponiblesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoHorasDisponiblesActionPerformed

    private void botonAgregarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarCursoActionPerformed
        // Acción a realizar cuando se presiona el boton "agregar curso"
        int i, tamLista;

        //Agrego la carrera
        try
        {       Carrera carreraAlQuePertenece = (Carrera)this.selectorListaCarreras.getSelectedItem();
                Semestre semestreAlquePertenece = (Semestre)this.selectorListaSemestres.getSelectedItem();
                String seccion = (String)this.selectorLetraSeccion.getSelectedItem() + "0" + (String)this.selectorNumeroSeccion.getSelectedItem();
                this.listManager.agregaCurso(this.campoNombreCursoNuevo.getText(), this.campoCodigoCursoNuevo.getText(), seccion, carreraAlQuePertenece, semestreAlquePertenece, this.cuadroDescripCurso.getText());
        }
        catch (nombreRepetidoException nombreRepetido)
        {
                if (nombreRepetido.getCodigoError() == 1)
                {       //abro nueva ventana
                        DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "Existe un curso con el mismo código y distinto nombre", "Escriba otro código de curso");
                        dialogoError.setVisible(true);
                        dialogoError = null;
                        return ;
                }
                if (nombreRepetido.getCodigoError() == 2)
                {       //abro nueva ventana
                        DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "Existe un curso con el mismo nombre, código y sección", "Escriba otro código de curso o sección");
                        dialogoError.setVisible(true);
                        dialogoError = null;
                        return ;
                }
                if (nombreRepetido.getCodigoError() == 3)
                {       //abro nueva ventana
                        DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "Existe un curso con el mismo nombre y sección en esta carrera", "Seleccione otra carrera u otra sección");
                        dialogoError.setVisible(true);
                        dialogoError = null;
                        return ;
                }
                if (nombreRepetido.getCodigoError() == 4)
                {       //abro nueva ventana
                        DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "Existe un curso igual en otro semestre de la carrera", "Seleccione otra carrera u otro nombre de curso.");
                        dialogoError.setVisible(true);
                        dialogoError = null;
                        return ;
                }
        }
        catch (StringVacioException excepcionStringVacio)
        {       //abro nueva ventana de error
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No hay un nombre de curso escrito", "Debe escribir un nombre de curso");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
        catch (NumberFormatException NFE)
        {       DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "El código de curso introducido no es válido", "vuelva a escribir el código del curso");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
        catch (NullPointerException e)
        {       //Abro dialogo de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "Al parecer no existen carreras disponibles", "Agregue una carrera antes de un curso");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
        this.listModelCursos = new DefaultListModel();
        tamLista = this.listManager.getListaCursos().size();
        for (i = 0; i < tamLista; i++)
        {   this.listModelCursos.addElement(this.listManager.getListaCursos().get(i));
        }
        this.visualizadorListaCursos.setModel(this.listModelCursos);
        this.visualizadorListaCursosValueChanged(null);
        this.cuadroInformacionCurso.setText("Se ha agregado correctamente el curso: "  + this.campoNombreCursoNuevo.getText());


    }//GEN-LAST:event_botonAgregarCursoActionPerformed

    private void menuVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVerManualActionPerformed
        // Acción a realizar cuando se presiona el menu "ver manual de usuario"
        // Ejecuto el visor de pdf por defecto del sistema operativo abriendo el manual de usuario
        Runtime visorPDF = Runtime.getRuntime();
        String ficheroPDF;
        try
        {       //Intengo abrir en el entorno de escritorio KDE
                if (System.getProperty("os.name").equals("Linux"))
                {       ficheroPDF = System.getProperty("user.dir") + System.getProperty("file.separator") + VentanaPrincipal.MANUAL_PDF;
                        System.out.println("Intentando abrir el fichero: "+ficheroPDF);
                        visorPDF.exec("kfmclient exec " + ficheroPDF);
                        //Intento abrir en el entorno de escritorio GNOME
                        visorPDF.exec("gnome-open " + ficheroPDF);
                }
                if (System.getProperty("os.name").startsWith("Windows"))
                {       //Intento abrir en windows
                        ficheroPDF = "\""+ System.getProperty("user.dir") + System.getProperty("file.separator") + VentanaPrincipal.MANUAL_PDF +"\"";
                        System.out.println("Intentando abrir el fichero: "+ficheroPDF);
                        visorPDF.exec("rundll32 url.dll,FileProtocolHandler "+ficheroPDF);
                }
        }
        catch (Exception e)
        {       System.out.println("No se puede lanzar el visor pdf");
        }
    }//GEN-LAST:event_menuVerManualActionPerformed

    private void botonNuevaCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevaCarreraActionPerformed
        //compruebo que existen facultades antes de agregar carreras.
        if (this.listManager.getListaFacultades().size() != 0)
        {       //Acción a realizar cuando se presiona el boton "nueva carrera"
                DialogoCarreraNueva dialogoCarreraNueva = new DialogoCarreraNueva(this, rootPaneCheckingEnabled, listManager, null, VentanaPrincipal.NUEVA);
                dialogoCarreraNueva.setVisible(true);
                dialogoCarreraNueva = null;
        }
        else
        {       //lanzo dialogo de error cuando se intenta agregar carreras sin existir facultades
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No se pueden crear carreras si no existe al menos una facultad", "Agregue una facultad antes.");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonNuevaCarreraActionPerformed

    public void actualizaJListListaProfes()
    {       this.listModelProfesores = null;
            this.listModelProfesores = new DefaultListModel();
            for (Profesor profesor : this.listManager.getListaProfesores())
            {       this.listModelProfesores.addElement(profesor);
            }
            this.visualizadorListaProfes.setModel(this.listModelProfesores);
            this.visualizadorListaProfesValueChanged(null);
    }

    public void borrarProfesor(Profesor profesorABorrar)
    {       //Borro el profesor del manipulador de listas, del Jlist y del visualizador
            this.cuadroInformacionProfes.setText("Se ha eliminado correctamente el profesor "+ profesorABorrar.getNombreProfesor());
            this.listManager.eliminaProfesor(profesorABorrar);
            this.actualizaJListListaProfes();
            this.actualizaJListListaCursos();
    }
    public void borrarCarrera(Carrera carreraABorrar)
    {       //Borro la carrera del manipulador de listas, del Jlist y del visualizador
            this.cuadroInformacionCarrera.setText("Se ha eliminado correctamente la carrera de "+ carreraABorrar.getNombreCarrera()+"\nSe han eliminado también los semestres de esas carreras");
            this.listManager.eliminaCarrera(carreraABorrar.getCodigoCarrera());
            this.actualizaJListListaCarreras();
            this.actualizaJListListaCursos();
    }
    public void borrarFacultad(Facultad facultadABorrar)
    {       //Borro la facultad del manipulador de listas, del Jlist y del visualizador
            this.cuadroInfornacionFacultad.setText("Se ha eliminado correctamente la facultad de "+ facultadABorrar.getNombreFacultad()+"\nSe ha borrado ademas las carreras de esa facultad: \n"+facultadABorrar.getNombreCarreras()+"\nSe han eliminado los semestres y cursos de las carreras eliminadas\n");
            this.listManager.eliminaFacultad(facultadABorrar);
            this.actualizaJListListaFacultades();
            this.actualizaJListListaCarreras();
            this.actualizaJListListaCursos();
    }
    public void borrarCurso(Curso cursoABorrar)
    {       //Borro el curso del manipulador de listas, del Jlist y del visualizador
            this.listManager.eliminaCurso(cursoABorrar);
            this.actualizaJListListaCursos();
            this.cuadroInformacionCurso.setText("Se ha eliminado correctamente el curso: " + cursoABorrar.getNombreCurso() + "\nSe han borrado las referencias de los semestres a ese curso");

    }

    public void actualizaJListListaCursos()
    {       this.listModelCursos = null;
            this.listModelCursos = new DefaultListModel();
            for (Curso curso : this.listManager.getListaCursos())
            {       this.listModelCursos.addElement(curso);
            }
            this.visualizadorListaCursos.setModel(this.listModelCursos);
            visualizadorListaCursosValueChanged(null);
    }

    public void actualizaJListListaFacultades()
    {       this.listModelFacultades = null;
            this.listModelFacultades = new DefaultListModel();
            for (Facultad facultad : this.listManager.getListaFacultades())
            {       this.listModelFacultades.addElement(facultad);
            }
            this.visualizadorListaFacultades.setModel(this.listModelFacultades);
            visualizadorListaFacultadesValueChanged(null);
            this.cuadroInfornacionFacultad.setText("Seleccione una facultad del listado del costado para ver su información");
    }

    public void actualizaJListListaCarreras()
    {       visualizadorListaFacultadesValueChanged(null);
            visualizadorListaCarrerasValueChanged(null);
            //Actualiza el selector de lista de carreras de la pestaña "cursos" de la ventana principal
            selectorListaCarreras.removeAllItems();
            ArrayList<Carrera> listaCarreras = listManager.getListaCarreras();
            int i, cantidadCarreras = this.listManager.getListaCarreras().size();
            for (i = 0; i < cantidadCarreras; i++)
            {       selectorListaCarreras.addItem(listaCarreras.get(i));
            }
    }

    private void botonNuevaFacultadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevaFacultadActionPerformed
        //Acción a realizar cuando se presiona el boton "nueva facultad"
        DialogoFacultadNueva dialogoFacultadNueva = new DialogoFacultadNueva(this, rootPaneCheckingEnabled, listManager, null, VentanaPrincipal.NUEVA);
        dialogoFacultadNueva.setVisible(true);
        dialogoFacultadNueva = null;
    }//GEN-LAST:event_botonNuevaFacultadActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //Antes de escribir, debo setear los nuevos valores de los id despues de utilizar las clases
        try
        {       // Aqui se escriben las listas modificadas en los archivos.
                gestorIOCursos.escribeSemestres(listManager.getListaSemestres(), Curso.getIdCursoGlobal(), Carrera.getCodigoCarreraGlobal(), Semestre.getIdSemestreGlobal(), Facultad.getIdFacultadGlobal());
                gestorIOCursos.escribeCarreras(listManager.getListaCarreras(), Curso.getIdCursoGlobal(), Carrera.getCodigoCarreraGlobal(), Semestre.getIdSemestreGlobal(), Facultad.getIdFacultadGlobal());
                gestorIOCursos.escribeCursos(listManager.getListaCursos(), Curso.getIdCursoGlobal(), Carrera.getCodigoCarreraGlobal(), Semestre.getIdSemestreGlobal(), Facultad.getIdFacultadGlobal());
                gestorIOCursos.escribeFacultades(listManager.getListaFacultades(), Curso.getIdCursoGlobal(), Carrera.getCodigoCarreraGlobal(), Semestre.getIdSemestreGlobal(), Facultad.getIdFacultadGlobal());
                gestorIOProfes.escribeProfes(listManager.getListaProfesores(), Profesor.getIdProfesorGlobal());
        }
        catch (Exception e)
        {       System.out.println("Error al escribir en los archivos");
        }
    }//GEN-LAST:event_formWindowClosing

    private void visualizadorListaFacultadesComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_visualizadorListaFacultadesComponentHidden

    }//GEN-LAST:event_visualizadorListaFacultadesComponentHidden

    private void visualizadorListaFacultadesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_visualizadorListaFacultadesValueChanged
        // Acción a realizar cuando se selecciona una facultad, se debe mostrar en el jList solo las carreras de esa facultad
        int tamLista, i;
        Facultad facultadSeleccionada;
        ArrayList<Carrera> listaCarrerasFacultadSeleccionada = null;
        this.listModelCarreras = null;
        this.listModelCarreras = new DefaultListModel();
        facultadSeleccionada = (Facultad)this.visualizadorListaFacultades.getSelectedValue();
        if (facultadSeleccionada != null)
        {       listaCarrerasFacultadSeleccionada = facultadSeleccionada.getCarreras();
                tamLista = listaCarrerasFacultadSeleccionada.size();
                for (i = 0; i < tamLista; i++)
                {       this.listModelCarreras.addElement(listaCarrerasFacultadSeleccionada.get(i));
                }
                //Muestro la información de la facultad seleccionada en el cuadro de informacion
                this.cuadroInfornacionFacultad.setText("Facultad de " +facultadSeleccionada.getNombreFacultad()+ "\nDetalles: \n" + facultadSeleccionada.getDescripcion());
        }
        this.visualizadorListaCarreras.setModel(this.listModelCarreras);
        this.cuadroInformacionCarrera.setText("Seleccione una carrera del listado del costado para ver su información");
    }//GEN-LAST:event_visualizadorListaFacultadesValueChanged

    private void visualizadorListaCarrerasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_visualizadorListaCarrerasValueChanged
        // Acción a realizar cuando se selecciona un elemento de la lista de carreras
        //Se debe mostrar el nombre de carrera en "labelCarreraSeleccionada"
        //Acá se muestra el nombre de la carrera seleccionada en el jlabel "labelCarreraSeleccionada"
        Carrera carreraSeleccionada;
        carreraSeleccionada = (Carrera)this.visualizadorListaCarreras.getSelectedValue();
        if (carreraSeleccionada != null)
        {       labelCarreraSeleccionada.setText(carreraSeleccionada.getNombreCarrera());
                this.cuadroInformacionCarrera.setText("Nombre de Carrera: " + carreraSeleccionada.getNombreCarrera()+"\nFacultad de "+carreraSeleccionada.getFacultad()+"\nCantidad de semestres : "+carreraSeleccionada.getListaSemestres().size()+"\nDescripción de la carrera: "+carreraSeleccionada.getDescripcion());
        }
        else
                this.cuadroInformacionCarrera.setText("Seleccione una carrera del listado del costado para ver su información");
    }//GEN-LAST:event_visualizadorListaCarrerasValueChanged

    private void visualizadorListaProfesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_visualizadorListaProfesValueChanged
        //Acá se muestra la información del profesor seleccionado
        Profesor profesorSeleccionado;
        profesorSeleccionado = (Profesor)this.visualizadorListaProfes.getSelectedValue();
        if (profesorSeleccionado != null)
        {       this.cuadroInformacionProfes.setText("Nombre del profesor: "+profesorSeleccionado.getNombreProfesor()+"\nRut del profesor: "+profesorSeleccionado.getRutProfesor()+"\nCursos para impartir: "+profesorSeleccionado.getCodCursosQueImparte()+"\nHoras disponibles: "+profesorSeleccionado.getHorasDisponibles() + "\nCursosAsignados: "+profesorSeleccionado.getCursosAsignados()+"\nHoras asignadas: "+profesorSeleccionado.getHorasAsignadas());
        }
        else
                this.cuadroInformacionProfes.setText("Seleccione un profesor del listado del costado para ver su información");
    }//GEN-LAST:event_visualizadorListaProfesValueChanged

    private void botonEliminarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarProfesorActionPerformed
        // Acción a realizar cuando se presiona el boton "eliminar profesor"
        // Se revisa cual es el profesor seleccionado en la JList de profesores y es ese el que se va a eliminar.
        // Se lanza una ventana pidiendo confirmación a esta acción
        Profesor profesorSeleccionado;
        profesorSeleccionado = (Profesor)this.visualizadorListaProfes.getSelectedValue();
        if (profesorSeleccionado != null)
        {       //Lanzo un dialogo pidiendo confirmación para eliminar el profesor seleccionado
                DialogoConfirmacion dialogoConfirmacion = new DialogoConfirmacion(this, rootPaneCheckingEnabled, DialogoConfirmacion.BORRA_PROFESOR, profesorSeleccionado);
                dialogoConfirmacion.setVisible(true);
                dialogoConfirmacion = null; 
                return ;
        }
        else
        {       //abro nueva ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado un profesor para eliminar", "Seleccione un profesor desde la lista de profesores del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonEliminarProfesorActionPerformed

    private void botonEliminarFacultadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarFacultadActionPerformed
        // Acción a realizar cuando se presiona el boton "eliminar facultad"
        // Se revisa cual es la facultad seleccionada en la JList de facultades y es ese el que se va a eliminar.
        // Se lanza una ventana pidiendo confirmación a esta acción
        Facultad facultadSeleccionada;
        facultadSeleccionada = (Facultad)this.visualizadorListaFacultades.getSelectedValue();
        if (facultadSeleccionada != null)
        {       //Lanzo un dialogo pidiendo confirmación para eliminar la facultad seleccionada
                DialogoConfirmacion dialogoConfirmacion = new DialogoConfirmacion(this, rootPaneCheckingEnabled, DialogoConfirmacion.BORRA_FACULTAD, facultadSeleccionada);
                dialogoConfirmacion.setVisible(true);
                dialogoConfirmacion = null;
                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado una facultad para eliminar", "Seleccione una facultad desde la lista de facultades del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonEliminarFacultadActionPerformed

    private void botonEliminarCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarCarreraActionPerformed
        // Acción a realizar cuando se presiona el boton "eliminar carrera"
        // Se revisa cual es la carrera seleccionada en la JList de carreras y es ese el que se va a eliminar.
        // Se lanza una ventana pidiendo confirmación a esta acción
        Carrera carreraSeleccionada;
        carreraSeleccionada = (Carrera)this.visualizadorListaCarreras.getSelectedValue();
        if (carreraSeleccionada != null)
        {       //Lanzo un dialogo pidiendo confirmación para eliminar la facultad seleccionada
                DialogoConfirmacion dialogoConfirmacion = new DialogoConfirmacion(this, rootPaneCheckingEnabled, DialogoConfirmacion.BORRA_CARRERA, carreraSeleccionada);
                dialogoConfirmacion.setVisible(true);
                dialogoConfirmacion = null;

                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado una carrera para eliminar", "Seleccione una carrera desde la lista de carreras del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonEliminarCarreraActionPerformed

    private void visualizadorListaCursosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_visualizadorListaCursosValueChanged
        //Acá se muestra la información del curso seleccionado
        //Acá se muestra el nombre de la carrera seleccionada en el jlabel "labelCarreraSeleccionada"
        Curso cursoSeleccionado;
        String horarioStr;
        cursoSeleccionado = (Curso)this.visualizadorListaCursos.getSelectedValue();
        if (cursoSeleccionado != null)
        {       horarioStr = cursoSeleccionado.getHorario(); //Es un ejemplo, debe ser implementado
                this.cuadroInformacionCurso.setText("Nombre del curso: " + cursoSeleccionado.getNombreCurso()+"\nCódigo del curso: "+cursoSeleccionado.getCodigoCurso()+"\nSección: "+cursoSeleccionado.getSeccion()+"\nProfesor asignado: "+cursoSeleccionado.getNombreProfesor()+"\nCarrera en que se dicta: "+cursoSeleccionado.getEnCarreraStr()+"\nSemestre en que se dicta: "+cursoSeleccionado.getEnSemestre()+"\nHorario: "+horarioStr+"\nDescripción del curso: "+cursoSeleccionado.getDescripcion());
        }
        else
                this.cuadroInformacionCurso.setText("Seleccione una carrera del listado del costado para ver su información");

    }//GEN-LAST:event_visualizadorListaCursosValueChanged

    private void panelVisualizadorCursosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelVisualizadorCursosFocusGained

    }//GEN-LAST:event_panelVisualizadorCursosFocusGained

    private void PanelVisualizadorGeneralStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_PanelVisualizadorGeneralStateChanged

    }//GEN-LAST:event_PanelVisualizadorGeneralStateChanged

    private void PanelVisualizadorGeneralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PanelVisualizadorGeneralMouseClicked

    }//GEN-LAST:event_PanelVisualizadorGeneralMouseClicked

    private void botonEditarFacultadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarFacultadActionPerformed
        // Acción a realizar cuando se presiona el boton "editar facultad"
        Facultad facultadSeleccionada;
        facultadSeleccionada = (Facultad)this.visualizadorListaFacultades.getSelectedValue();
        if (facultadSeleccionada != null)
        {       //Lanzo un dialogo para editar la facultad seleccionada
                DialogoFacultadNueva dialogoFacultadNueva = new DialogoFacultadNueva(this, rootPaneCheckingEnabled, listManager, facultadSeleccionada,VentanaPrincipal.EDITA);
                dialogoFacultadNueva.setVisible(true);
                dialogoFacultadNueva = null;
                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado una facultad para editar", "Seleccione una facultad desde la lista de facultades del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
        
    }//GEN-LAST:event_botonEditarFacultadActionPerformed

    private void botonEditarCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarCarreraActionPerformed
        // Acción a realizar cuando se presiona el boton "editar carrera"
        Carrera carreraSeleccionada;
        carreraSeleccionada = (Carrera)this.visualizadorListaCarreras.getSelectedValue();
        if (carreraSeleccionada != null)
        {       //Lanzo un dialogo para editar la carrera seleccionada
                DialogoCarreraNueva dialogoCarreraNueva = new DialogoCarreraNueva(this, rootPaneCheckingEnabled, listManager, carreraSeleccionada, VentanaPrincipal.EDITA);
                dialogoCarreraNueva.setVisible(true);
                dialogoCarreraNueva = null;
                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado una carrera para editar", "Seleccione una carrera desde la lista de carreras del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonEditarCarreraActionPerformed

    private void botonEliminarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarCursoActionPerformed
        // Acción a realizar cuando se presiona el boton "eliminar curso"
        // Se revisa cual es el curso seleccionado en la JList de cursos y es ese el que se va a eliminar.
        // Se lanza una ventana pidiendo confirmación a esta acción
        Curso cursoSeleccionado;
        cursoSeleccionado = (Curso)this.visualizadorListaCursos.getSelectedValue();
        if (cursoSeleccionado != null)
        {       //Lanzo un dialogo pidiendo confirmación para eliminar la facultad seleccionada
                DialogoConfirmacion dialogoConfirmacion = new DialogoConfirmacion(this, rootPaneCheckingEnabled, DialogoConfirmacion.BORRA_CURSO, cursoSeleccionado);
                dialogoConfirmacion.setVisible(true);
                dialogoConfirmacion = null;

                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado una curso para eliminar", "Seleccione una curso desde la lista de carreras del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonEliminarCursoActionPerformed

    private void selectorListaCarrerasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectorListaCarrerasItemStateChanged
        // Cuando se selecciona una carrera:
        // En el selectorListaSemestres se deben mostrar solo los semestres de esa carrera
        this.selectorListaSemestres.removeAllItems();
        ArrayList<Semestre> listaSemestres = listManager.getListaSemestres();
        if (this.selectorListaCarreras.getSelectedItem() == null)
            return ;
        int i, cantidadSemestres = listaSemestres.size();
        for (i = 0; i < cantidadSemestres; i++)
        {       if(listaSemestres.get(i).getCodigoEnCarrera() == ((Carrera)this.selectorListaCarreras.getSelectedItem()).getCodigoCarrera())
                {       this.selectorListaSemestres.addItem(listaSemestres.get(i));
                }
        }
    }//GEN-LAST:event_selectorListaCarrerasItemStateChanged

    //Sale del programa al clickear el menu "salir", guarda las listas antes de salir.
    private void menuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalirActionPerformed
        // cierro el programa
        this.formWindowClosing(null);
        System.exit(0);
    }//GEN-LAST:event_menuSalirActionPerformed

    private void botonEditarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarProfesorActionPerformed
        // Acción a realizar cuando se presiona el boton "editar profesor"
        Profesor profesorSeleccionado;
        profesorSeleccionado = (Profesor)this.visualizadorListaProfes.getSelectedValue();
        if (profesorSeleccionado != null)
        {       //Lanzo un dialogo para editar el profesor seleccionado
                DialogoEdicionProfesor dialogoEdicionProfesor = new DialogoEdicionProfesor(this, rootPaneCheckingEnabled, this.listManager, profesorSeleccionado);
                dialogoEdicionProfesor.setVisible(true);
                dialogoEdicionProfesor = null;
                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado un profesor para editar", "Seleccione un profesor desde la lista de profesores del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonEditarProfesorActionPerformed

    private void botonVerHorarioProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerHorarioProfesorActionPerformed
        // Muestro el visualizador de horario del profesor seleccionado
        Profesor profesorSeleccionado;
        profesorSeleccionado = (Profesor)this.visualizadorListaProfes.getSelectedValue();
        if (profesorSeleccionado != null)
        {       VisualizadorHorarioObjeto ventanaHorario = new VisualizadorHorarioObjeto(this, rootPaneCheckingEnabled, profesorSeleccionado, VisualizadorHorarioObjeto.VISUALIZACION, null);
                ventanaHorario.setVisible(true);
                ventanaHorario = null;
                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado un profesor para ver su horario", "Seleccione un profesor desde la lista de profesores del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonVerHorarioProfesorActionPerformed

    private void botonVerHorarioCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerHorarioCursoActionPerformed
        // Muestro el visualizador de horario del curso seleccionado.
        Curso cursoSeleccionado;
        cursoSeleccionado = (Curso)this.visualizadorListaCursos.getSelectedValue();
        if (cursoSeleccionado != null)
        {       VisualizadorHorarioObjeto ventanaHorario = new VisualizadorHorarioObjeto(this, rootPaneCheckingEnabled, cursoSeleccionado,  VisualizadorHorarioObjeto.VISUALIZACION, null);
                ventanaHorario.setVisible(true);
                ventanaHorario = null;
                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado un curso para ver su horario", "Seleccione un curso desde la lista de cursos del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonVerHorarioCursoActionPerformed

    private void botonEditarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarCursoActionPerformed
        // Acción a realizar cuando se presiona el boton "editar curso"
        Curso cursoSeleccionado;
        cursoSeleccionado = (Curso)this.visualizadorListaCursos.getSelectedValue();
        if (cursoSeleccionado != null)
        {       //Lanzo un dialogo para editar el profesor seleccionado
                DialogoEdicionCurso dialogoEdicionCurso = new DialogoEdicionCurso(this, rootPaneCheckingEnabled, this.listManager, cursoSeleccionado);
                dialogoEdicionCurso.setVisible(true);
                dialogoEdicionCurso = null;
                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado un curso para editar", "Seleccione un curso desde la lista de cursos del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonEditarCursoActionPerformed

    private void botonVerMallaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerMallaActionPerformed
        // Acción a realizar cuando se presiona el boton "Ver malla"
        Carrera carreraSeleccionada;
        carreraSeleccionada = (Carrera)this.visualizadorListaCarreras.getSelectedValue();
        if (carreraSeleccionada != null)
        {       //Lanzo un dialogo para editar el profesor seleccionado
                DialogoMalla dialogoMalla = new DialogoMalla(this, rootPaneCheckingEnabled, carreraSeleccionada);
                dialogoMalla.setVisible(true);
                dialogoMalla = null;
                return ;
        }
        else
        {       //abro ventana de error.
                DialogoError dialogoError = new DialogoError(this, rootPaneCheckingEnabled, "No ha seleccionado una carrera para ver su malla", "Seleccione un curso desde la lista de cursos del costado");
                dialogoError.setVisible(true);
                dialogoError = null;
                return ;
        }
    }//GEN-LAST:event_botonVerMallaActionPerformed

    private void botonBuscarCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarCarreraActionPerformed
        // Acción a realizar cuando se presiona el boton "buscar carrera"
        DialogoBusqueda dialogoBusqueda = new DialogoBusqueda(this, rootPaneCheckingEnabled, this.listManager, Carrera.class);
        dialogoBusqueda.setVisible(true);
        dialogoBusqueda = null;
    }//GEN-LAST:event_botonBuscarCarreraActionPerformed

    private void botonBuscarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarProfesorActionPerformed
        // Acción a realizar cuando se presiona el boton "buscar profesor"
        DialogoBusqueda dialogoBusqueda = new DialogoBusqueda(this, rootPaneCheckingEnabled, this.listManager, Profesor.class);
        dialogoBusqueda.setVisible(true);
        dialogoBusqueda = null;
    }//GEN-LAST:event_botonBuscarProfesorActionPerformed

    private void botonBuscarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarCursoActionPerformed
        // Acción a realizar cuando se presiona el boton "buscar curso"
        DialogoBusqueda dialogoBusqueda = new DialogoBusqueda(this, rootPaneCheckingEnabled, this.listManager, Curso.class);
        dialogoBusqueda.setVisible(true);
        dialogoBusqueda = null;
    }//GEN-LAST:event_botonBuscarCursoActionPerformed

    private void menuAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAcercaDeActionPerformed
        //Acción a realizar cuando se presiona el menu "acerca de...". Muestro dialogo de información de los creadores de JRamos
        DialogoAcercaDe dialogoAcercaDe = new DialogoAcercaDe(this, rootPaneCheckingEnabled);
        dialogoAcercaDe.setVisible(true);
        dialogoAcercaDe = null;
    }//GEN-LAST:event_menuAcercaDeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelVisualizadorCarreras;
    private javax.swing.JTabbedPane PanelVisualizadorGeneral;
    private javax.swing.JPanel PanelVisualizadorProfesores;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton botonAgregarCurso;
    private javax.swing.JButton botonAgregarProfesor;
    private javax.swing.JButton botonBuscarCarrera;
    private javax.swing.JButton botonBuscarCurso;
    private javax.swing.JButton botonBuscarProfesor;
    private javax.swing.JButton botonEditarCarrera;
    private javax.swing.JButton botonEditarCurso;
    private javax.swing.JButton botonEditarFacultad;
    private javax.swing.JButton botonEditarProfesor;
    private javax.swing.JButton botonEliminarCarrera;
    private javax.swing.JButton botonEliminarCurso;
    private javax.swing.JButton botonEliminarFacultad;
    private javax.swing.JButton botonEliminarProfesor;
    private javax.swing.JButton botonNuevaCarrera;
    private javax.swing.JButton botonNuevaFacultad;
    private javax.swing.JButton botonVerHorarioCurso;
    private javax.swing.JButton botonVerHorarioProfesor;
    private javax.swing.JButton botonVerMalla;
    private javax.swing.JTextField campoCodigoCursoNuevo;
    private javax.swing.JTextField campoHorasDisponibles;
    private javax.swing.JTextField campoNombreCursoNuevo;
    private javax.swing.JTextField campoNombreProfesorNuevo;
    private javax.swing.JTextField campoRamosQueDicta;
    private javax.swing.JTextField campoRutProfesor;
    private javax.swing.JTextArea cuadroDescripCurso;
    private javax.swing.JTextArea cuadroInformacionCarrera;
    private javax.swing.JTextArea cuadroInformacionCurso;
    private javax.swing.JTextArea cuadroInformacionProfes;
    private javax.swing.JTextArea cuadroInfornacionFacultad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelCarreraSeleccionada;
    private javax.swing.JMenuItem menuAcercaDe;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuItem menuSalir;
    private javax.swing.JMenuItem menuVerManual;
    private javax.swing.JPanel panelVisualizadorCursos;
    private javax.swing.JComboBox selectorLetraSeccion;
    private javax.swing.JComboBox selectorListaCarreras;
    private javax.swing.JComboBox selectorListaSemestres;
    private javax.swing.JComboBox selectorNumeroSeccion;
    private javax.swing.JList visualizadorListaCarreras;
    private javax.swing.JList visualizadorListaCursos;
    private javax.swing.JList visualizadorListaFacultades;
    private javax.swing.JList visualizadorListaProfes;
    // End of variables declaration//GEN-END:variables

}
